name: "CI-Win"
on:
  push:
    tags:
    - v*.*.*
  schedule:
    - cron: "0 10 * * *"  # Run at 2am PST (10am UTC) every day as postsubmit.
  workflow_dispatch:  # Manual trigger
    inputs:
      REFRESH_CACHE:
        description: 'Refresh cache to remove unused files'
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  nightly-check:
    name: "Nightly-Win"
    runs-on: windows-latest
    permissions:
      actions: write  # For gh cache delete.
      contents: write  # For gh release upload.
    env:
      # Clear ANDROID_NDK_HOME as windows-latest has NDK where jobs don't have permission for
      # androidndk rulesto create symlinks.
      ANDROID_NDK_HOME:
      GH_TOKEN: ${{ github.token }}  # For gh release upload.
      REFRESH_CACHE: ${{ github.event_name == 'workflow_dispatch' && inputs.REFRESH_CACHE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name : Set up cache keys
        id: cache-keys
        run: |
          $CACHE_RESTORE_KEY_2="${{ github.workflow }}"
          $CACHE_RESTORE_KEY_1="$CACHE_RESTORE_KEY_2-${{ hashFiles('**/WORKSPACE', '**/.bazelrc') }}"
          $CACHE_RESTORE_KEY_0="$CACHE_RESTORE_KEY_1-${{ hashFiles('**/BUILD*') }}"
          $CACHE_KEY="$CACHE_RESTORE_KEY_0-${{ github.sha }}"
          echo "CACHE_RESTORE_KEY_2=$CACHE_RESTORE_KEY_2" >> "$env:GITHUB_OUTPUT"
          echo "CACHE_RESTORE_KEY_1=$CACHE_RESTORE_KEY_1" >> "$env:GITHUB_OUTPUT"
          echo "CACHE_RESTORE_KEY_0=$CACHE_RESTORE_KEY_0" >> "$env:GITHUB_OUTPUT"
          echo "CACHE_KEY=$CACHE_KEY" >> "$env:GITHUB_OUTPUT"

      - name: Restore bazel cache if cache is not being refreshed.
        if: ! env.REFRESH_CACHE
        uses: actions/cache/restore@v4
        id: bazel-cache
        with:
          path: ~/.cache/bazel-windows
          key: ${{ steps.cache-keys.outputs.CACHE_KEY }}
          restore-keys: |
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_0 }}-
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_1 }}-
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_2 }}-

      - name: Check cache hit
        run: |
          echo "Cache Hit: ${{ steps.bazel-cache.outputs.cache-hit }}"
          echo "Cache Primary Key: ${{ steps.bazel-cache.outputs.cache-primary-key }}"
          echo "Cache Matched Key: ${{ steps.bazel-cache.outputs.cache-matched-key }}"

      - name: Run bazel build on Windows
        run: |
          bazel build --disk_cache=~/.cache/bazel-windows `
            --define=DISABLE_HUGGINGFACE_TOKENIZER=1 "--" `
            //... `
            //runtime/engine:litert_lm_main `
            -//runtime/components:huggingface_tokenizer `
            -//runtime/components:huggingface_tokenizer_test

      - name: Update litert_lm_main prebuilt for Windows if new version tag is pushed.
        if: github.ref_type == 'tag'
        run: |
          cp bazel-bin/runtime/engine/litert_lm_main.exe litert_lm_main.windows_x86_64.exe
          gh release upload ${{ github.ref_name }} litert_lm_main.windows_x86_64.exe --clobber

      - name: Run bazel test on Windows
        run: |
          bazel test --disk_cache=~/.cache/bazel-windows `
            --define=DISABLE_HUGGINGFACE_TOKENIZER=1 --test_output=errors "--" `
            //... `
            -//runtime/components:huggingface_tokenizer_test

      - name: Remove cache if cache is being refreshed.
        if: env.REFRESH_CACHE
        run: gh cache delete ${{ steps.cache-keys.outputs.CACHE_KEY }} || echo "Cache not found"

      - name: Save bazel cache if it's new or being refreshed.
        uses: actions/cache/save@v4
        if: env.REFRESH_CACHE || steps.bazel-cache.outputs.cache-hit != 'true'
        with:
          path: ~/.cache/bazel-windows
          key: ${{ steps.cache-keys.outputs.CACHE_KEY }}
